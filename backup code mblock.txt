import novapi
from mbuild import power_expand_board,gamepad
from mbuild.encoder_motor import encoder_motor_class
from mbuild.smartservo import smartservo_class
from mbuild import power_manage_module
from mbuild.ranging_sensor import ranging_sensor_class

import math
import time

global speedlimit , check_spin , check_limit , spin ,is_reverse ,check_reverse
speedlimit = 0.4
check_limit = False
check_spin = False
spin = False
is_reverse = False
check_reverse = False
left_con = False
auto = False
count = 0
move_count = 0

def movement(speedlimit):
    x_joyleft = float(gamepad.get_joystick("Lx"))
    y_joyleft = float(gamepad.get_joystick("Ly"))
    x_joyright = float(gamepad.get_joystick("Rx"))
    y_joyright = float(gamepad.get_joystick("Ry"))
    degree = math.atan2(y_joyleft,x_joyleft) - (math.pi/4)
    speed = math.sqrt(((x_joyleft)**2 + (y_joyleft)**2)) 

    degree_Turn = math.atan2(-1 * y_joyright,x_joyright) + (math.pi/4)
    speed_Turn = math.sqrt(((x_joyright)**2 + (y_joyright)**2)) 

    dls = math.sin(degree) 
    drs = math.cos(degree)  
    if (y_joyleft < 0) :
        if (dls >= drs) :
            dls = -(dls / drs)
            drs = -1
        else:
            drs = -(drs / dls)
            dls = -1
            
    else:
        if (drs <= dls):
            drs = drs / dls
            dls = 1
        else:
            dls = dls / drs
            drs = 1
            
        
    dls = dls * speed
    drs = drs * speed

    if is_reverse == True:
        dls *= -1
        drs *= -1

    drs_turn = math.sin(degree_Turn) * speed_Turn
    dls_turn = math.cos(degree_Turn) * speed_Turn

    encoder_motor_M1.set_power((dls - drs_turn) * speedlimit)
    encoder_motor_M2.set_power(-1 * (drs + dls_turn) * speedlimit)
    encoder_motor_M3.set_power((drs - drs_turn) * speedlimit)
    encoder_motor_M4.set_power(-1 * (dls + dls_turn) * speedlimit)

def control():

    global speedlimit , check_spin , check_limit , spin , is_reverse , check_reverse , left_con
    
    if gamepad.is_key_pressed("R1") and speedlimit < 1 and check_limit == False:
        speedlimit += 0.2
        check_limit = True

    elif gamepad.is_key_pressed("L1") and speedlimit > 0.2 and check_limit == False:
        speedlimit -= 0.2
        check_limit = True

    if gamepad.is_key_pressed("R1") == False and gamepad.is_key_pressed("L1") == False:
        check_limit = False
    
    if gamepad.is_key_pressed("Up"):
        power_expand_board.set_power("DC1",100)
    elif gamepad.is_key_pressed("Down"):
        power_expand_board.set_power("DC1",-100)
    else:
        power_expand_board.set_power("DC1",2)
        if gamepad.is_key_pressed("Right"):
            left_con = True
        elif gamepad.is_key_pressed("Left"):
            left_con = False
            power_expand_board.set_power("DC5" , 80)
            time.sleep(0.25)
            power_expand_board.set_power("DC5",0)
            power_expand_board.stop("DC5")
    

    
    if left_con == True :
        power_expand_board.set_power("DC5",-80)
    else:
        power_expand_board.stop("DC5")
    

    if gamepad.is_key_pressed("N1") and check_spin == False:
        spin = not spin
        check_spin = True
    if gamepad.is_key_pressed("N1") == False:
        check_spin = False

    if gamepad.is_key_pressed("N1") and check_spin == False:
        spin = not spin

    

    if gamepad.is_key_pressed("R2") :
        power_expand_board.set_power("BL1",100)
        power_expand_board.set_power("BL2",100)
        power_expand_board.set_power("DC8",20)
    elif gamepad.is_key_pressed("L2") :
        power_expand_board.set_power("BL1",60)
        power_expand_board.set_power("BL2",60)
        power_expand_board.set_power("DC8",20)
    else:
        power_expand_board.stop("BL1")
        power_expand_board.stop("BL2")
        power_expand_board.set_power("DC8",0)

    

    if spin == True and gamepad.is_key_pressed("≡") == False:
        power_expand_board.set_power("DC2",-80)
        power_expand_board.set_power("DC3",-40)
        power_expand_board.set_power("DC4",-100)
    elif spin == True and gamepad.is_key_pressed("≡") == True:
        power_expand_board.set_power("DC2",80)
        power_expand_board.set_power("DC3",80)
        power_expand_board.set_power("DC4",100)
        
    else:
        power_expand_board.stop("DC1")
        power_expand_board.stop("DC2")
        power_expand_board.stop("DC3")
        power_expand_board.stop("DC4")

    if gamepad.is_key_pressed("≡"):
        if gamepad.is_key_pressed("N4"):
            smartservo_1.move(7,100)
        if gamepad.is_key_pressed("N3"):
            smartservo_1.move(-7,100)
    else:
        if gamepad.is_key_pressed("N4"):
            smartservo_1.move_to(50,80)
        if gamepad.is_key_pressed("N3"):
            smartservo_1.move_to(-10,80)

    if gamepad.is_key_pressed("N2") and check_reverse == False and gamepad.is_key_pressed("≡") == True:
        is_reverse = not is_reverse
        check_reverse = True
    elif gamepad.is_key_pressed("N2") and gamepad.is_key_pressed("≡") == False and check_reverse == False:


        power_expand_board.set_power("DC6",-100)
        time.sleep(1)
        power_expand_board.set_power("DC6",100)
        time.sleep(1)
        power_expand_board.set_power("DC6",0)


        check_reverse = True
    if gamepad.is_key_pressed("N2") == False:
        check_reverse = False
def endo (speed , m1 ,m2 ,m3,m4 ,intake):
    global count

    if intake == 1 :
        power_expand_board.set_power("DC2",-100)
        power_expand_board.set_power("DC3",-90)
        power_expand_board.set_power("DC4",-100)
    else:
        power_expand_board.set_power("DC2",0)
        power_expand_board.set_power("DC3",0)
        power_expand_board.set_power("DC4",0)

    encoder_motor_M1.move(m4 * -1, speed)
    encoder_motor_M2.move(m3 , speed)
    encoder_motor_M3.move(m2 * -1, speed) 
    encoder_motor_M4.move(m1 , speed)


    while True:
        if encoder_motor_M1.get_value("speed") != 0 or encoder_motor_M2.get_value("speed") != 0 or encoder_motor_M3.get_value("speed") != 0 or encoder_motor_M4.get_value("speed") != 0 or count <= 20:
            count += 1
        else:
            count = 0
            break
        

def autonomous():
    #ซ้าย
    if  distance_sensor_1.get_distance() >= 10:
        time.sleep(0.01)
        #เบี่ยงไปเอา K
        endo(200, 300 , -300 , -300 , 300 , 0)
        endo(200, 2100 , 2100 , 2100 , 2100 , 0)
        endo(150, 830 , -830 , 830 , -830 , 0)


        encoder_motor_M1.set_power(20)
        encoder_motor_M2.set_power(-20)
        encoder_motor_M3.set_power(20) 
        encoder_motor_M4.set_power(-20)


        time.sleep(1.08)

        encoder_motor_M1.set_power(25)
        encoder_motor_M2.set_power(-25) 
        encoder_motor_M3.set_power(25) 
        encoder_motor_M4.set_power(-25)
        power_expand_board.set_power("DC5" , 100)
        power_expand_board.set_power("DC1",100)

        time.sleep(0.96)

        encoder_motor_M1.set_power(0)
        encoder_motor_M2.set_power(0)
        encoder_motor_M3.set_power(0) 
        encoder_motor_M4.set_power(0)
        power_expand_board.set_power("DC1",0)
        power_expand_board.set_power("DC5",0)
        power_expand_board.stop("DC5")

        endo(70, 680 , 680 , 680 , 680 , 0)




        endo(90, -830 , 830 , -830 , 830 , 0)

        endo(100, 410 , 410 , 410 , 410 , 0)

        power_expand_board.set_power("DC5",-100)
        time.sleep(0.5)
        power_expand_board.set_power("DC5",0)
        power_expand_board.set_power("DC1",100)
        time.sleep(0.5)
        power_expand_board.set_power("DC1",0)

        
        endo(120, -400 , -400 , -400 , -400 , 0)

        power_expand_board.set_power("DC1",-100)
        time.sleep(0.8)
        power_expand_board.set_power("DC1",0)

        endo(120, 850 , -850 , 850 , -850 , 0)
        

        power_expand_board.set_power("DC5",100)
        encoder_motor_M1.set_power(50)
        encoder_motor_M2.set_power(-50)
        encoder_motor_M3.set_power(50) 
        encoder_motor_M4.set_power(-50)

        time.sleep(0.3)
        
        power_expand_board.set_power("DC5",0)
        encoder_motor_M1.set_power(20)
        encoder_motor_M2.set_power(-20)
        encoder_motor_M3.set_power(20) 
        encoder_motor_M4.set_power(-20)

        time.sleep(2)

        encoder_motor_M1.set_power(0)
        encoder_motor_M2.set_power(0)
        encoder_motor_M3.set_power(0) 
        encoder_motor_M4.set_power(0)

        endo(150, 200 , 200 , 200 , 200 , 0)

        endo(120, -850 , 850 , -850 , 850 , 0)

        endo(120, 850 , -850 , -850 , 850 , 0)

        endo(120, -850 , 850 , 850 , -850 , 0)


    #ขวา
    else:
        time.sleep(0.01)
        #เบี่ยงไปเอา K
        endo(200, -300 , 300 , 300 , -300 , 0)
        endo(200, 2100 , 2100 , 2100 , 2100 , 0)
        endo(150, -830 , 830 , -830 , 830 , 0)


        encoder_motor_M1.set_power(20)
        encoder_motor_M2.set_power(-20)
        encoder_motor_M3.set_power(20) 
        encoder_motor_M4.set_power(-20)


        time.sleep(1.08)

        encoder_motor_M1.set_power(25)
        encoder_motor_M2.set_power(-25)
        encoder_motor_M3.set_power(25) 
        encoder_motor_M4.set_power(-25)
        power_expand_board.set_power("DC5" , 100)
        power_expand_board.set_power("DC1",100)

        time.sleep(0.96)

        encoder_motor_M1.set_power(0)
        encoder_motor_M2.set_power(0)
        encoder_motor_M3.set_power(0) 
        encoder_motor_M4.set_power(0)
        power_expand_board.set_power("DC1",0)
        power_expand_board.set_power("DC5",0)
        power_expand_board.stop("DC5")

        endo(70, 700 , 700 , 700 , 700 , 0)




        endo(90, 840 , -840 , 840 , -840 , 0)

        endo(100, 250 , 250 , 250 , 250 , 0)

        power_expand_board.set_power("DC5",-100)
        time.sleep(0.5)
        power_expand_board.set_power("DC5",0)
        power_expand_board.set_power("DC1",100)
        time.sleep(0.5)
        power_expand_board.set_power("DC1",0)

        endo(120, -400 , -400 , -400 , -400 , 0)

        power_expand_board.set_power("DC1",-100)
        time.sleep(0.8)
        power_expand_board.set_power("DC1",0)

        endo(120, -850 , 850 , -850 , 850 , 0)
       

        power_expand_board.set_power("DC5",100)
        encoder_motor_M1.set_power(50)
        encoder_motor_M2.set_power(-50)
        encoder_motor_M3.set_power(50) 
        encoder_motor_M4.set_power(-50)

        time.sleep(0.3)
        
        power_expand_board.set_power("DC5",0)
        encoder_motor_M1.set_power(20)
        encoder_motor_M2.set_power(-20)
        encoder_motor_M3.set_power(20) 
        encoder_motor_M4.set_power(-20)

        time.sleep(2)

        encoder_motor_M1.set_power(0)
        encoder_motor_M2.set_power(0)
        encoder_motor_M3.set_power(0) 
        encoder_motor_M4.set_power(0)

        endo(150, 200 , 200 , 200 , 200 , 0)

        endo(120, 850 , -850 , 850 , -850 , 0)

        endo(120, -850 , 850 , 850 , -850 , 0)

        endo(120, 850 , -850 , -850 , 850 , 0)

        



    
    
novapi.reset_rotation("z")
encoder_motor_M1 = encoder_motor_class("M3", "INDEX1")
encoder_motor_M2 = encoder_motor_class("M2", "INDEX1")
encoder_motor_M3 = encoder_motor_class("M6", "INDEX1")
encoder_motor_M4 = encoder_motor_class("M4", "INDEX1")
smartservo_1 = smartservo_class("M5","INDEX1")
distance_sensor_1 = ranging_sensor_class("PORT3", "INDEX1")





while True:
    if gamepad.is_key_pressed("+") and count == 0:
        auto = True
        count = 1
    elif gamepad.is_key_pressed("R2") and  gamepad.is_key_pressed("≡") :
        count = 0

    if power_manage_module.is_auto_mode() or  auto == True:
        autonomous()
        auto = False
    else:
        movement(speedlimit)
        control()

    
    
    
    
    
    
    
        
    
