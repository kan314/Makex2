import novapi
from mbuild import power_expand_board,gamepad
from mbuild.encoder_motor import encoder_motor_class
from mbuild.smartservo import smartservo_class
import math
import time

global speedlimit , check_spin , check_limit , spin
speedlimit = 0.4
check_limit = False
check_spin = False
spin = False

def movement(speedlimit)
    x_joyleft = float(gamepad.get_joystick(Lx))
    y_joyleft = float(gamepad.get_joystick(Ly))
    x_joyright = float(gamepad.get_joystick(Rx))
    y_joyright = float(gamepad.get_joystick(Ry))
    degree = math.atan2(y_joyleft,x_joyleft) - (math.pi4)
    speed = math.sqrt(((x_joyleft)2 + (y_joyleft)2)) 

    degree_Turn = math.atan2(-1  y_joyright,x_joyright) + (math.pi4)
    speed_Turn = math.sqrt(((x_joyright)2 + (y_joyright)2)) 

    dls = math.sin(degree) 
    drs = math.cos(degree)  
    if (y_joyleft  0) 
        if (dls = drs) 
            dls = -(dls  drs)
            drs = -1
        else
            drs = -(drs  dls)
            dls = -1
            
    else
        if (drs = dls)
            drs = drs  dls
            dls = 1
        else
            dls = dls  drs
            drs = 1
            
        
    dls = dls  speed
    drs = drs  speed

    drs_turn = math.sin(degree_Turn)  speed_Turn
    dls_turn = math.cos(degree_Turn)  speed_Turn

    encoder_motor_M1.set_power((dls - drs_turn)  speedlimit)
    encoder_motor_M2.set_power(-1  (drs + dls_turn)  speedlimit)
    encoder_motor_M3.set_power((drs - drs_turn)  speedlimit)
    encoder_motor_M4.set_power(-1  (dls + dls_turn)  speedlimit)

def control()

    global speedlimit , check_spin , check_limit , spin
    
    if gamepad.is_key_pressed(R1) and speedlimit  1 and check_limit == False
        speedlimit += 0.2
        check_limit = True

    elif gamepad.is_key_pressed(L1) and speedlimit  0.2 and check_limit == False
        speedlimit -= 0.2
        check_limit = True

    if gamepad.is_key_pressed(R1) == False and gamepad.is_key_pressed(L1) == False
        check_limit = False
    
    
    if gamepad.is_key_pressed(N1) and check_spin == False
        spin = not spin
        check_spin = True
    if gamepad.is_key_pressed(N1) == False
        check_spin = False

    if gamepad.is_key_pressed(R2)
        power_expand_board.set_power(BL1,100)
        power_expand_board.set_power(BL2,100)
        power_expand_board.set_power(DC8,20)
    else
        power_expand_board.stop(BL1)
        power_expand_board.stop(BL2)
        power_expand_board.set_power(DC8,0)

    if gamepad.is_key_pressed(L2)
        power_expand_board.set_power(DC5,100)
        time.sleep(0.4)
        power_expand_board.set_power(DC5,0)
        power_expand_board.stop(DC5)
        power_expand_board.set_power(DC5,-100)
        time.sleep(0.8)
        power_expand_board.set_power(DC5,0)
        power_expand_board.stop(DC5)
    

    if spin == True
        power_expand_board.set_power(DC1,100)
        power_expand_board.set_power(DC2,-80)
        power_expand_board.set_power(DC3,-70)
        power_expand_board.set_power(DC4,-100)
        
    else
        power_expand_board.stop(DC1)
        power_expand_board.stop(DC2)
        power_expand_board.stop(DC3)
        power_expand_board.stop(DC4)
    if gamepad.is_key_pressed(â‰¡)
        if gamepad.is_key_pressed(N4)
            smartservo_1.move(7,100)
        if gamepad.is_key_pressed(N3)
            smartservo_1.move(-7,100)
    else
        if gamepad.is_key_pressed(N4)
            smartservo_1.move_to(290,80)
        if gamepad.is_key_pressed(N3)
            smartservo_1.move_to(230,80)


novapi.reset_rotation(z)
encoder_motor_M1 = encoder_motor_class(M1, INDEX1)
encoder_motor_M2 = encoder_motor_class(M2, INDEX1)
encoder_motor_M3 = encoder_motor_class(M3, INDEX1)
encoder_motor_M4 = encoder_motor_class(M4, INDEX1)
smartservo_1 = smartservo_class(M5,INDEX1)


while True
    
    movement(speedlimit)
    control()

    
    
    
    
    
    
    
        
    
